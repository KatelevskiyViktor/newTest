разница в том, что с __DIR__ путь раскрывается в абсолютный, когда без него вы используете относительный.
При использовании относительного пути происходит поиск файлов по всем директориям, которые указаны в переменной include_path. При указании абсолютного пути вы абсолютно точно идентифицируете путь к файлу, поэтому поиска не происходит -- интерпретатор просто пытается открыть один-единственный файл.
Теперь представьте, что у вас такая структура каталогов:
|-- dir1
|   |-- file2.php
|   `-- file.php
|-- dir2
|   |-- file2.php
|   `-- file.php
|-- dir3
|   |-- file2.php
|   `-- file.php
|-- dir4
|   |-- file2.php
|   `-- file.php
.............
`-- dir9
    `-- index.php
а в include_path:
Код Code

.;C:/mysite/html/1;C:/mysite/html/2;C:/mysite/html/3;C:/mysite/html/4;...;C:/mysite/html/9
и вы сейчас находитесь в директории 'C:/mysite/html', которая и является корневой для вашего сайта.
В таком случае, при выполнении
Код PHP
1
include 'index.php'
интерпретатору придется пройти по директориям:

C:/mysite/html/1
C:/mysite/html/2
C:/mysite/html/3
C:/mysite/html/4
......
в поисках файла с именем 'index.php', но ни в одной из директорий его нет, кроме 'C:/mysite/html/9', которая будет обходиться последней.
Если бы вы написали

include __DIR__.'/dir9/index.php'
то никакого поиска бы не происходило, поскольку вы указали абсолютный, единственно возможный, путь, и интерпретатор попытался бы прочитать только его.
Одним словом, абсолютный путь позволяет найти конкретный файл быстрее в такой ситуации.

Однако, в реальности в include_path обычно прописано всего несколько директорий, и он очень часто начинается с директории '.'(т.е. текущая директория), поэтому лишних проверок не должно быть, если файл находится в текущем каталоге.
Можете попробовать сделать бенчмарк и проверить, однако я сомневаюсь что там будет что-то, кроме флукутаций, ибо операции ввода-вывода будут происходить заведомо дольше конкатенации строк
Не по теме:

впрочем, если дело происходит в ramfs, то, может, что-то и получится замерить



Короче говоря, в реальности разница несущественна, если, конечно, у вас не очень много директорий в include_path. Тем не менее, почему-то с давних пор считается моветоном указывать относительный путь, наверное поэтому ваш преподаватель и ругается, хотя в реальности это правило акутально, по большей части, лишь для небольших standalone-библиотек, пути к которым в include_path запихивать как-то не комильфо, особенно в начало, да и в общем-то не имеет особого смысла в них использовать относительные пути -- в 99.9% случаев им нужен лишь конкретный файл, вычислить абсолютный путь которого не составляет труда.
А вот в каком-нибудь крупном фреймворке использование include-ов с относительными путями могло бы помочь: например, когда есть несколько директорий с одинаковой структурой (к примеру, default-шаблоны движка и локальные, для конкретного сайта), можно прописать их обе в include_path и include-ить файлы из них по относительному пути.

В подтверждение того, что отказ от абсолютных директорий не так уж сильно влияет на производительность, является то, что многие из библиотек pear их не используют.
Есть, однако, и еще один 'недостаток' от использования относительных путей: появляется своего рода неоднозначность, когда существует множество файлов с одинаковым именем. Как, например, тот же
Код PHP

include 'index.php';
Если не задумываться о структуре каталогов и не знать, что находится в include_path, то можно успешно подгрузить какой-нибудь другой index.php
Не по теме:

разумеется, если у вас множество папок с этим файлом, и если они указаны в include_path

Однако, если знать как это все работает, то этого легко избежать, продумав структуру каталогов заранее (ее все равно придется продумывать), ну а если сомневаетесь, то можно взять за правило: прописывать их абсолютными путями в обязательном порядке.

Не по теме:

Я в курсе, что не совсем прав насчет относительных и абсолютных путей, и что путь './file.php' тоже будет относительным, однако он не задействует include_path. В контексте данного сообщения следует воспринимать этот путь как 'абсолютный', ибо он тоже однозначно указывает путь, относительно текущего каталога. Под относительными путями я имел ввиду лишь те, обработка которых происходит с учетом include_path.
Разработчики php вставили такую рекомендацию:

Использование . в include_path позволяет задавать относительные пути для подключения файлов, так как точка означает текущую директорию. Однако, более эффективно использовать include './file', чем заставлять PHP каждый раз проверять текущую директорию при подключении каждого файла.
